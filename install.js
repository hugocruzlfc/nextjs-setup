#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const sourceDir = path.join(__dirname, 'template'); // Contenido de config/
const destDir = process.cwd(); // Ra√≠z del proyecto destino

// Funci√≥n para mostrar una animaci√≥n de "cargando" con puntitos
function showLoading(message) {
  process.stdout.write(`${message} `);
  let dots = 0;
  const interval = setInterval(() => {
    process.stdout.write('.');
    dots++;
    if (dots > 3) {
      process.stdout.clearLine(0);
      process.stdout.cursorTo(0);
      process.stdout.write(`${message} `);
      dots = 0;
    }
  }, 300);
  return () => {
    clearInterval(interval);
    process.stdout.clearLine(0);
    process.stdout.cursorTo(0);
  };
}

try {
  // Copiar archivos con animaci√≥n
  console.log('Copying configuration files... ‚åõÔ∏è');
  const stopCopyLoading = showLoading('Copying configuration files ‚åõÔ∏è');
  fs.readdirSync(sourceDir).forEach((file) => {
    const sourcePath = path.join(sourceDir, file);
    const destPath = path.join(destDir, file);
    if (fs.lstatSync(sourcePath).isDirectory()) {
      fs.cpSync(sourcePath, destPath, { recursive: true });
    } else {
      fs.copyFileSync(sourcePath, destPath);
    }
  });
  stopCopyLoading();
  console.log('Configuration files copied! ‚úÖ');

  // Instalar dependencias con animaci√≥n
  const stopDepLoading = showLoading('Installing dependencies ‚åõÔ∏è');
  execSync('pnpm install', { stdio: 'inherit', cwd: destDir });
  stopDepLoading();
  console.log('Dependencies installed! ‚úÖ');

  // Configurar Husky con animaci√≥n
  const stopHuskyLoading = showLoading('Applying Husky configuration ‚åõÔ∏è');
  execSync('npx husky install', { stdio: 'inherit', cwd: destDir });
  stopHuskyLoading();
  console.log('Husky configured! ‚úÖ');

  console.log('Setup complete! üéâ');
} catch (error) {
  console.error('Error:', error.message);
  process.exit(1);
}
